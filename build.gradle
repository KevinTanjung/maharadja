plugins {
  id "application"
  id "org.openjfx.javafxplugin" version "0.1.0"
}

repositories {
  // Use Maven Central for resolving dependencies.
  mavenCentral()
}

wrapper {
  version = "8.5"
  distributionType = Wrapper.DistributionType.BIN
}

application {
  mainClass = "edu.uph.learn.maharadja.Main"
}

javafx {
  version = "21"
  modules = ["javafx.controls"]
}

//region Dependencies
dependencies {
  implementation "com.fasterxml.jackson.core:jackson-databind:2.17.2"
  implementation "org.apache.logging.log4j:log4j-api:2.24.3"
  implementation "org.apache.logging.log4j:log4j-core:2.24.3"
  implementation "org.apache.logging.log4j:log4j-slf4j2-impl:2.24.3"
  implementation "org.openjfx:javafx-controls:21"
  compileOnly "org.projectlombok:lombok:1.18.36"
  annotationProcessor "org.projectlombok:lombok:1.18.36"

  testImplementation "org.junit.jupiter:junit-jupiter:5.8.2"
  testCompileOnly "org.projectlombok:lombok:1.18.36"
  testAnnotationProcessor "org.projectlombok:lombok:1.18.36"
}

dependencyLocking {
  lockAllConfigurations()
}

tasks.register("resolveAndLockAll") {
  notCompatibleWithConfigurationCache("Filters configurations at execution time")
  doFirst {
    assert gradle.startParameter.writeDependencyLocks : "$path must be run from the command line with the `--write-locks` flag"
  }
  doLast {
    configurations.findAll {
      // Add any custom filtering on the configurations to be resolved
      it.canBeResolved
    }.each { it.resolve() }
  }
}
//endregion

tasks.named("test") {
  useJUnitPlatform()
}

tasks.named("run") {
  doFirst {
    if (project.hasProperty("server")) {
      args = ["--server", project.property("server").toString()]
    } else if (project.hasProperty("client")) {
      args = ["--client", project.property("client").toString()]
    }
  }
}
